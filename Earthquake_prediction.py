# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mWUeQa7xrV-PtCfoQMdYCe-BVBj24gx9
"""

import numpy as np
import pandas as pd
import os
for dirname, _, filenames in os.walk('/content/earthquake_1995-2023.csv'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('/content/earthquake_1995-2023.csv')
df

df['tsunami'] = df['tsunami'].replace({1: True, 0: False})

data = df[['title','alert','tsunami','country','magnitude','nst','mmi','sig','depth']]
data

cols = ['magnitude','nst','mmi','sig','depth']
Q1 = data[cols].quantile(0.1)
Q3 = data[cols].quantile(0.9)
IQR = Q3 - Q1
condition = ~((data[cols] < (Q1 - 1.5 * IQR)) | (data[cols] > (Q3 + 1.5 * IQR))).any(axis=1)
data_filtered = data[condition]

data_filtered.isnull().sum()
data_cleaned = data_filtered.dropna()
data_cleaned.isnull().sum()
data_sampled = data_cleaned

fig_hist, (ax_magnitude, ax_nst, ax_mmi) = plt.subplots(1, 3, figsize=(18, 6), dpi=100)
plot_data = [('magnitude', ax_magnitude, "Magnitude"),
             ('nst', ax_nst, "NST"),
             ('mmi', ax_mmi, "MMI")]
for data_col, axis, title in plot_data:
    sns.histplot(data=data_sampled, x=data_col, ax=axis)
    axis.set_title(title)
plt.tight_layout()
plt.show()

fig, axes = plt.subplots(1, 2, figsize=(18, 6), dpi=100)

sns.histplot(data = data_sampled, x = 'sig', ax=axes[0])
axes[0].set_title("SIG")

sns.histplot(data = data_sampled, x = 'depth', ax=axes[1])
axes[1].set_title("Depth")

sns.boxplot(data=data_sampled,x='tsunami',y = 'magnitude')
plt.xticks(rotation=45,ha="right");

sns.boxplot(data=data_sampled,x='alert',y = 'depth')
plt.xticks(rotation=45,ha="right");

plt.figure(figsize=(15, 10))
sns.heatmap(data_sampled[['magnitude','nst','mmi','sig','depth']].corr(), annot=True, linecolor='black', cmap='magma')
plt.show()

X=np.array(data_sampled.loc[:,'sig'].values.reshape(-1, 1))
Y=np.array(data_sampled.loc[:,'magnitude'].values.reshape(-1, 1))

plt.scatter(X, Y)
plt.grid()
plt.xlabel("sig")
plt.ylabel("magnitude")

linreg = LinearRegression()

linreg.fit(X, Y)

print('a=',linreg.coef_[0][0])
print('b=',linreg.intercept_[0])

Y_hat=linreg.predict(X)
a= 0.0006894344669968863
b= 6.276420957598918

erro=Y_hat-Y
df_estimado=pd.DataFrame(np.concatenate((X,Y,Y_hat,erro),axis=1), columns=['X','Y','Y_hat','Erro (e)'])
df_estimado

plt.scatter(X, Y, label='Valor Real')
plt.scatter(X, Y_hat,color='red',  label='Valor Predito')
plt.grid()
plt.legend(loc='upper right')

plt.xlabel("Faltas por Semestre (X)")
plt.ylabel("Nota Final")

plt.scatter(X, Y)
plt.plot(X, Y_hat,color='red')
plt.grid()
plt.xlabel("Faltas por Semestre")
plt.ylabel("Nota Final")

print("MSE=",mean_squared_error(Y, Y_hat),", R^2=", r2_score(Y,Y_hat))